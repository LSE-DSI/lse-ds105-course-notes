---
title: "💻 Week 02 - Lab Roadmap (90 min)"
date: 1 September 2022
date-meta: 1 September 2022
---

This week, we will learn to access and navigate your computer in a shell called bash, the most common way to access computers in the cloud (the topic of next week's lecture and lab). 

By default, bash is available on Unix-based operating systems (Linux and macOS) but not on Windows. Those using Windows will have to install some additional software first. 

<details><summary>Step 1: Setting up (5-20 min)</summary>

## Step 1: Setting up
<p></p>
<details class="special"> <summary> ![](/figures/logos/windows_logo.svg){height="1em" fig-align="left" vertical-align="middle" fig-alt="Windows logo"} Windows users </summary>
<p></p>

Sadly, Windows command line interfaces differ from those used in Unix-based operating systems (Linux and macOS). Therefore, the commands we will learn today do not apply to Windows. 

But fear not! Recent versions of Windows have a feature called Windows Subsystem for Linux, or WSL [^microsoft_what_2022], which you can use to install Linux distributions. You just have to enable it first.

🎯 **ACTION POINTS** Follow Steps 1-4 of the tutorial ["Install Ubuntu on Wsl2 on Windows 11 with GUI Support."](https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support)

[^microsoft_what_2022]: Microsoft Tutorial: ["What Is Windows Subsystem for Linux"](https://docs.microsoft.com/en-us/windows/wsl/about)

</details>

<details class="special"> <summary> ![](/figures/logos/apple_logo.svg){height="1em" fig-align="left" vertical-align="middle" fig-alt="Apple logo"} macOS users </summary>
<p></p>

🎯 **ACTION POINTS** 

1. Open [the terminal](https://support.apple.com/en-gb/guide/terminal/apd5265185d-f365-44cb-8b09-71a064a42125/mac#:~:text=Open%20Terminal&text=Click%20the%20Launchpad%20icon%20in,%2C%20then%20double%2Dclick%20Terminal) 
2. Now, to ensure you are using the bash shell, type the following and hit ENTER:

    ```bash
    echo $SHELL
    ```
If you see the following message printed on the terminal screen, you are all good to move to the next step.

    ```console
    /bin/bash
```

3. If instead, you saw the message below:

    ```console
    /bin/zsh
    ```
This means your computer came pre-packed with a different terminal called Z Shell. Read and follow the instructions in [this tutorial](https://news.learnenough.com/macos-bash-zshell#aside-changing_shells) to change your shell to bash [^zshell].

[^zshell]: Curious about the different shells on Mac 🤓 ? Checkout the full article on ["Learn Enough Tutorials: Using Z Shell on Macs](https://news.learnenough.com/macos-bash-zshell) 

</details>

<details class="special"> <summary> ![](/figures/logos/linux_logo.svg){height="1em" fig-align="left" vertical-align="middle" fig-alt="Linux logo"} Linux users </summary>
<p></p>

You probably already know how to get to the terminal — typically the shortcut Ctrl+T will get you there. 

Just ensure you are running the bash shell. If not, follow the same instructions given to macOS users above.
</details>

</details>


<details><summary>Step 2: Locate yourself (20 min)</summary>

## Step 2: Locating yourself


We will follow the instructions below step by step together while answering whatever questions you might encounter along the way.

1. Open the bash shell using the instructions from Step 1 above
2. Type `pwd` and hit ENTER:

    ```bash
     pwd
    ```

    You should get a string of text indicating the full path of where you are inside the terminal.

3. Are you currently in your `$HOME` directory? To find out where your home directory is, use the following command:

    ```bash
     echo $HOME
    ```

4. Are there any files/sub-directories inside the directory you are currently in? Use `ls` to investigate:

    ```bash
     ls
    ```

    or

    ```bash
     ls .
    ```

5. Are there any hidden files?

    ```bash
     ls -a
    ```

6. Now, let's explore what is above your current directory:

    ```bash
     ls ..
    ```

7. Do you get what the different dots `.` and `..` mean [^1]?

8. Now, more than just look at the parent directory, let's move there:

    ```bash
     cd ..
    ```

    then use the same `ls` commands you explored above. Did you notice anything different now? 

9. Let's force `ls` to print the same information in a different format. Try the following command:

    ```bash
     ls . -lth
    ```

    What does the `-l`, `-t` and `-h` arguments mean? You can find out by looking at the `ls` manual:

    ```bash
     man ls
    ```

    Use the arrow keys in your keyboard to scroll up and down the manual. Type the character `q` when you are done browsing.

10. Now, try to go back to the directory you were at the start of this tutorial. Hint: if you get stuck, try `pwd` again and compare the output you get now to the one you got the first time you used this command.




:::{.callout-tip collapse="true"}
## Small Hint

For your future research, if you see "$" sign at the beginning of the code snippets, it means you are in a system shell and should type your commands in the shell.

     $ pwd

    
:::

</details>

<details><summary> Step 3: Wandering away from `$HOME` (20 min)</summary>
## Step 3: Wandering away from `$HOME`

Now, given what we practiced, try to follow the steps below (help from colleagues is fine) and take note of your answers to the questions. 

We will go over the solutions once everyone has finished this step. 

🎯 **ACTION POINTS** 

1. Go to the root of the filesystem:

    ```bash
     cd /
    ```
2. What do you see with `ls`? What does it mean?
3. Walk around freely up and down the directories and sub-directories you encounter along the way. Check the links on [🔖 Week 02 Appendix - Linux and the Terminal](week02_appendix.html#linux-the-terminal) page to understand where you are navigating.
4. Which directory(ies) under `/` were you not allowed to enter? Why?
5. What is the difference between the `/root` directory and the root filesystem `/`?
4. Go back `$HOME`
</details>

<details><summary> Step 4: Installing software (10 min)</summary>
## Step 4: Installing software

> 💭 How do you install apps in your computer or smart phone? 

It is very likely that you just head to a software store (Play Store, Apple Store or Microsoft Store) and download apps from there. Linux has something similar, you can access and download software using the `apt` command. Let's use it to download the text editor [vim](https://www.vim.org/about.php).

🎯 **ACTION POINTS** 

1. Whenever you want to download software with `apt`, you have to ensure you have the most up-to-date information from the central "store". You can do this via the following command:

    ```bash
     sudo apt update
    ```

    This command requires you to have admin rights (as root), which is why we run it with `sudo` [^2]. You might be asked to type your password.
2. Install vim:

    ```bash
     sudo apt install vim
    ```
3. Now you can open vim:

    ```bash
     vim
    ```

    To quit, press `Esc`, then type `:q` and hit `ENTER`. Still stuck and cannot quit vim? [You are not alone](https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/).

</details>

<details><summary>Step 5: Creating and editing files and directories (20 min)</summary>
## Step 5: Creating and editing files and directories

🎯 **ACTION POINTS** 

1. Go to your `$HOME` directory or a folder of your choice. Then, create and enter a directory, let's call it **DS105**:

    ```bash
     cd $HOME
     mkdir DS105
     cd DS105
    ```

2. Create a text file and call it `README.txt`:

    ```bash
     touch README.txt
    ```

3. Open this file with vim:

    ```bash
     vim README.txt
    ```

4. Inside vim, write something to the file (your name, a verse, a sentence, whatever comes to mind)

5. Now save your changes to the file. To save a file when inside vim, press `Esc` then type `:w` and hit `ENTER`.

6. Quit vim: press `Esc`, then type `:q` and hit `ENTER` [^3]. 

7. Print the content of your file with the `cat` command:

    ```bash
     cat README.txt
    ```

</details>

<details><summary> **Formative assignment**</summary>

## Formative assignment

This problem set is not graded but you will get written feedback if you submit.

Follow the steps below and, when asked, copy your responses to the [Moodle page of this assignment](). 

### P1: Identify yourself

1. On the terminal, type the two commands below:

    ```bash
     whoami
    ```

    ```bash
     uname -a
    ```

2. Take a screenshot ([how?](https://www.take-a-screenshot.org/)) of your terminal and submit to Moodle, under the field identified as P1.

### P2: Edit a file

1. Go to the DS105 folder you created earlier:

    ```bash
     cd ~/DS105
    ```

2. Rename the `README.txt` to `README.md` (a markdown file):

    ```bash
     mv README.txt README.md
    ```

3. Edit the README.md file following the template below, replacing all occurrences of `<>` with your responses:

    ```markdown
    # DS105

    Name: <>
    Date: <>
    Candidate Number: <>
    Degree Program: <>

    ## Notes

    - I want to learn data science because <>
    ```

4. Save and quit vim.

5. Print some metadata about your file to prove you were the one editing it:

    ```bash
     stat README.md
    ```

6. Print the contents of your file to the terminal:

    ```bash
     cat README.md
    ```

7. Take a screenshot ([how?](https://www.take-a-screenshot.org/)) of your terminal and submit to Moodle, under the field identified as P2. Make sure that both the output of `stat` and `cat` commands are visible.

</details>

<details><summary>(Bonus) 🏠 Practice at home: `vimtutor`</summary>
## Practice at home: `vimtutor`

🎯 **ACTION POINTS** 

1. Open the terminal and type:

    ```bash
     vimtutor
    ```
2. Follow the instructions on the screen and complete the tutorial (a total of 7 short lessons).

Check out the [🔖 Week 02 Appendix - 📃 Text editors](week02_appendix.html#text-editors) section for more info on `vim`.

</details>

[^1]: See the answer to this question on Stackoverflow: ["What is double dot(..) and single dot(.) in Linux?"](https://stackoverflow.com/a/23242061/843365)

[^2]: The [`sudo` Wikipedia entry](https://www.wikiwand.com/en/Sudo) has quite a good summary

[^3]: Still stuck and cannot quit vim? [You are not alone](https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/).